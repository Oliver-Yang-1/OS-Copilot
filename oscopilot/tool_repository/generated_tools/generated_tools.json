{
    "create_folder": {
        "code": "import os\n\ndef create_folder(working_directory, folder_name):\n   \"\"\"\n   Create a folder under the specified working directory or the default working directory.\n\n   Args:\n   working_directory (str): The path of the working directory. If not provided, the default working directory will be used.\n   folder_name (str): The name of the folder to be created. Default is 'myfold'.\n\n   Returns:\n   None\n   \"\"\"\n   # Check if the working_directory is provided, if not, use the default working directory\n   if working_directory:\n      os.chdir(working_directory)\n\n   # Create the folder\n   os.makedirs(folder_name)",
        "description": "Create a folder under the specified working directory or the default working directory"
    },
    "search_files_for_word": {
        "code": "def search_files_for_word(directory, word):\n    \"\"\"\n    Identify all text files in the specified directory that contain the given word.\n    \n    Args:\n    directory (str): The path of the directory to search for text files.\n    word (str): The word to search for within the text files.\n    \n    Returns:\n    list: A list of filenames that contain the specified word.\n    \"\"\"\n    import os\n\n    # List to store the names of files containing the word\n    files_with_word = []\n\n    # Iterate over all files in the specified directory\n    for filename in os.listdir(directory):\n        # Construct the full file path\n        file_path = os.path.join(directory, filename)\n        \n        # Check if the file is a text file\n        if os.path.isfile(file_path) and filename.endswith('.txt'):\n            # Open and read the file\n            with open(file_path, 'r', encoding='utf-8') as file:\n                # Check if the word is in the file\n                if word in file.read():\n                    # Add the filename to the list\n                    files_with_word.append(filename)\n    \n    return files_with_word",
        "description": "Identify all text files in the specified directory that contain the given word"
    },
    "save_html_content": {
        "code": "def save_html_content(html_content, file_path):\n    \"\"\"\n    Save the retrieved HTML content to a specified file.\n\n    Args:\n    html_content (str): The HTML content to be saved.\n    file_path (str): The absolute path where the HTML content should be saved.\n\n    Returns:\n    str: A message indicating that the HTML content has been saved successfully.\n    \"\"\"\n    with open(file_path, 'w', encoding='utf-8') as file:\n        file.write(html_content)\n    return f\"HTML content has been saved to {file_path}\"",
        "description": "Save the retrieved HTML content to a specified file"
    },
    "extract_html_content_and_summarize": {
        "code": "def summarize_html(html_path, user_requirement=\"Summarize the content\"):\n    from bs4 import BeautifulSoup\n    from oscopilot.utils.llms import OpenAI\n    \"\"\"\n    Summarizes the content of an HTML file based on the user's requirement.\n\n    Args:\n        html_path (str): The path to the HTML file to summarize.\n        user_requirement (str): Additional instructions or requirements for the summary.\n                                Defaults to \"Summarize the content\".\n\n    Returns:\n        str: The summary of the HTML content generated by OpenAI.\n    \"\"\"\n    try:\n        # Read the HTML file\n        with open(html_path, 'r', encoding='utf-8') as file:\n            html_content = file.read()\n\n        # Extract text from HTML using BeautifulSoup\n        soup = BeautifulSoup(html_content, 'html.parser')\n        text_content = soup.get_text(separator=' ', strip=True)\n\n        # Initialize OpenAI instance\n        llm = OpenAI()\n\n        # Create the messages for OpenAI chat\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant that processes HTML content.\"},\n            {\"role\": \"user\", \"content\": f\"{user_requirement}: {text_content}\"}\n        ]\n\n        # Get the response from OpenAI\n        response = llm.chat(messages)\n\n        return response\n\n    except Exception as e:\n        # Handle errors (e.g., file not found, OpenAI API errors)\n        return f\"An error occurred: {str(e)}\"",
        "description": "Summarizes the content of an HTML file based on the user's requirement"
    },
    "extract_html_content_and_answer_question": {
        "code": "from bs4 import BeautifulSoup\nfrom oscopilot.utils.llms import OpenAI\n\ndef question_html(html_path, user_question):\n    \"\"\"\n    Answers a user-provided question based on the content of an HTML file.\n\n    Args:\n        html_path (str): The path to the HTML file to analyze.\n        user_question (str): The question the user wants to ask about the HTML content.\n\n    Returns:\n        str: The response to the user's question generated by OpenAI.\n    \"\"\"\n    try:\n        # Read the HTML file\n        with open(html_path, 'r', encoding='utf-8') as file:\n            html_content = file.read()\n\n        # Extract text from HTML using BeautifulSoup\n        soup = BeautifulSoup(html_content, 'html.parser')\n        text_content = soup.get_text(separator=' ', strip=True)\n\n        # Initialize OpenAI instance\n        llm = OpenAI()\n\n        # Create the messages for OpenAI chat\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a knowledgeable assistant that answers questions based on provided HTML content.\"},\n            {\"role\": \"user\", \"content\": f\"The following is the extracted content from an HTML file:\\n{text_content}\\n\\nUser Question: {user_question}\"}\n        ]\n\n        # Get the response from OpenAI\n        response = llm.chat(messages)\n\n        return response\n\n    except FileNotFoundError:\n        return f\"Error: The file at {html_path} was not found.\"\n    except Exception as e:\n        # Handle other exceptions\n        return f\"An error occurred: {str(e)}\"\n",
        "description": "Answers a user-provided question based on the content of an HTML file"
    }
}